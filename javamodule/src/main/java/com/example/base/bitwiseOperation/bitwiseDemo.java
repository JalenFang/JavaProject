package com.example.base.bitwiseOperation;

/**
 * author: jalen
 * date: 2017/11/17
 * editor:
 * date:
 * describe: 位运算
 */
public class BitwiseDemo {
    public static void main(String[] args) {
        /**
         * 左移 <<
         * 将5左移两位 运算结果是20
         * 解题思路
         * 1.首先会将5转换成二进制表示 int类型是32位 0000 0000 0000 0000 0000 0000 0000 0101
         * 2.然后左移2位 低位补0  0000 0000 0000 0000 0000 0000 0001 0100
         * 3.换算成十进制 也就是20
         * */
        System.out.println("5 << 2 值: " + (5 << 2));

        /**
         *右移 >>  运算结果1
         * 将5右移两位 高位补0  0000 0000 0000 0000 0000 0000 0000 0001
         * 换算成十进制的值为1
         */
        System.out.println("5 >> 2 值: " + (5 >> 2));

        /**
         *位与  第一个操作数的的第n位 第二个操作数的第n位 如果都是1，那么结果的第n为也为1，否则为0
         * 5的二进制表示 0000 0000 0000 0000 0000 0000 0000 0101
         * 3的二进制表示 0000 0000 0000 0000 0000 0000 0000 0011
         * 位与的结果表示 0000 0000 0000 0000 0000 0000 0000 0001 十进制表示为1
         */
        System.out.println("5 & 3 值: " + (5 & 3));

        /**
         *位或 第一个操作数的的第n位 第二个操作数的第n位 只要有一个是1，那么结果的第n为也为1，否则为0
         * 5的二进制表示 0000 0000 0000 0000 0000 0000 0000 0101
         * 3的二进制表示 0000 0000 0000 0000 0000 0000 0000 0011
         * 位或的结果表示 0000 0000 0000 0000 0000 0000 0000 0111 十进制表示为7
         */
        System.out.println("5 | 3 值: " + (5 | 3));

        /**
         *位异或 第一个操作数的的第n位 第二个操作数的第n位 相反，那么结果的第n位为1，否则为0
         *    5的二进制表示 0000 0000 0000 0000 0000 0000 0000 0101
         *    3的二进制表示 0000 0000 0000 0000 0000 0000 0000 0011
         * 位异或的结果表示 0000 0000 0000 0000 0000 0000 0000 0110 十进制表示为6
         */
        System.out.println("5 ^  3 值: " + (5 ^ 3));

        /**
         *位非是一元操作符  操作数的第n位为1，那么结果的第n位为0，反之。
         *  5的二进制表示 0000 0000 0000 0000 0000 0000 0000 0101
         * ~5的二进制表示 1111 1111 1111 1111 1111 1111 1111 1010 十进制表示为-6
         *
         * 1111 1111 1111 1111 1111 1111 1111 1010  先减一
         * 1111 1111 1111 1111 1111 1111 1111 1001  然后取反 得到原码
         * 0000 0000 0000 0000 0000 0000 0000 0110 值为6 然后添加一个负号  为-6
         *
         * 数值在计算机中表示都是补码的形式
         * 正数的原码 反码 补码是其本身
         * 负数的补码 等于其数值的正数 然后获取这个正数的反码 最后反码加一
         */
        System.out.println("~5 值: " + ~5);

        /*由位运算操作符衍生而来的有：
        &= 按位与赋值
                |=  按位或赋值
                ^= 按位非赋值
                >>= 右移赋值
                >>>= 无符号右移赋值
                <<= 赋值左移

        和 += 一个概念而已*/
        int a = 5;
        a &= 3;
        System.out.println(a);//结果是1
    }
}
